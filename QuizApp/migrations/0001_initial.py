# Generated by Django 2.1.7 on 2020-06-06 11:17

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(blank=True, max_length=250, null=True, unique=True, verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Different_Marking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('easy_marks', models.SmallIntegerField(default=100, help_text='Marks to be alloted on right answer.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Marks for Easy Questions')),
                ('easy_neg', models.SmallIntegerField(default=0, help_text='Marks to be deducted on wrong answer. If no negative marking is opted then enter 0.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Negative Marking for Easy Questions')),
                ('medium_marks', models.SmallIntegerField(default=100, help_text='Marks to be alloted on right answer.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Marks for Medium Questions')),
                ('medium_neg', models.SmallIntegerField(default=0, help_text='Marks to be deducted on wrong answer. If no negative marking is opted then enter 0.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Negative Marking for Medium Questions')),
                ('hard_marks', models.SmallIntegerField(default=100, help_text='Marks to be alloted on right answer.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Marks for Hard Questions')),
                ('hard_neg', models.SmallIntegerField(default=0, help_text='Marks to be deducted on wrong answer. If no negative marking is opted then enter 0.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Negative Marking for Hard Questions')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60, verbose_name='Title')),
                ('description', models.TextField(blank=True, default='Get Set Go', help_text='A description of the quiz. [Optional]', verbose_name='Description')),
                ('random_order', models.BooleanField(default=False, help_text='Display the questions in a random order or as they are set?', verbose_name='Random Order')),
                ('max_questions', models.PositiveIntegerField(blank=True, help_text='Number of questions to be asked on each attempt. [Optional]', null=True, verbose_name='Max Questions')),
                ('answers_at_end', models.BooleanField(default=False, help_text='Correct answer is NOT shown after question. Answers displayed at the end.', verbose_name='Answers at end')),
                ('pass_mark', models.SmallIntegerField(default=100, help_text='Percentage required to pass exam.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Pass Mark')),
                ('success_text', models.TextField(blank=True, help_text='Displayed if user passes. [Optional]', verbose_name='Success Text')),
                ('fail_text', models.TextField(blank=True, help_text='Displayed if user fails. [Optional]', verbose_name='Fail Text')),
                ('time_alloted', models.DateTimeField(auto_now_add=True, help_text='Time to be alloted for Quiz.', verbose_name='Time Alloted')),
                ('slug', models.SlugField(blank=True, help_text='URL to be generated.', max_length=250, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='QuizApp.Category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Quiz',
                'verbose_name_plural': 'Quizzes',
            },
        ),
        migrations.CreateModel(
            name='Same_Marking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marks', models.SmallIntegerField(default=100, help_text='Marks to be alloted on right answer.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Marks')),
                ('neg', models.SmallIntegerField(default=0, help_text='Marks to be deducted on wrong answer. If no negative marking is opted then enter 0.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Negative Marking')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QuizApp.Quiz')),
            ],
        ),
        migrations.AddField(
            model_name='different_marking',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='QuizApp.Quiz'),
        ),
    ]
